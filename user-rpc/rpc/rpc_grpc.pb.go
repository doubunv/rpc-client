// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: dsl/rpc.proto

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AdminUser_UserLogin_FullMethodName = "/rpc.AdminUser/userLogin"
)

// AdminUserClient is the client API for AdminUser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdminUserClient interface {
	// 管理员登录
	UserLogin(ctx context.Context, in *AdminUserLoginReq, opts ...grpc.CallOption) (*AdminUserLoginResp, error)
}

type adminUserClient struct {
	cc grpc.ClientConnInterface
}

func NewAdminUserClient(cc grpc.ClientConnInterface) AdminUserClient {
	return &adminUserClient{cc}
}

func (c *adminUserClient) UserLogin(ctx context.Context, in *AdminUserLoginReq, opts ...grpc.CallOption) (*AdminUserLoginResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AdminUserLoginResp)
	err := c.cc.Invoke(ctx, AdminUser_UserLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdminUserServer is the server API for AdminUser service.
// All implementations must embed UnimplementedAdminUserServer
// for forward compatibility.
type AdminUserServer interface {
	// 管理员登录
	UserLogin(context.Context, *AdminUserLoginReq) (*AdminUserLoginResp, error)
	mustEmbedUnimplementedAdminUserServer()
}

// UnimplementedAdminUserServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAdminUserServer struct{}

func (UnimplementedAdminUserServer) UserLogin(context.Context, *AdminUserLoginReq) (*AdminUserLoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLogin not implemented")
}
func (UnimplementedAdminUserServer) mustEmbedUnimplementedAdminUserServer() {}
func (UnimplementedAdminUserServer) testEmbeddedByValue()                   {}

// UnsafeAdminUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdminUserServer will
// result in compilation errors.
type UnsafeAdminUserServer interface {
	mustEmbedUnimplementedAdminUserServer()
}

func RegisterAdminUserServer(s grpc.ServiceRegistrar, srv AdminUserServer) {
	// If the following call pancis, it indicates UnimplementedAdminUserServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AdminUser_ServiceDesc, srv)
}

func _AdminUser_UserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AdminUserLoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdminUserServer).UserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AdminUser_UserLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdminUserServer).UserLogin(ctx, req.(*AdminUserLoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AdminUser_ServiceDesc is the grpc.ServiceDesc for AdminUser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AdminUser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.AdminUser",
	HandlerType: (*AdminUserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "userLogin",
			Handler:    _AdminUser_UserLogin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dsl/rpc.proto",
}
